---
# Arch package repository provides the open source version of Visual Studio
# Code, which cannot install proprietary Microsoft extensions. For more
# information, see
# https://wiki.archlinux.org/index.php/Visual_Studio_Code#No_extensions_found.
- name: Install VSCode for Arch
  ansible.builtin.command: yay -Sy --noconfirm visual-studio-code-bin
  when: ansible_pkg_mgr == "pacman"

- name: Install VSCode for Debian
  ansible.builtin.apt:
    deb: >-
      https://update.code.visualstudio.com/latest/linux-deb-{{
      _vscode_arch[system_architecture] }}/stable
  become: true
  when: ansible_pkg_mgr == "apt" and ansible_distribution != "Pop!_OS"

- name: Add Microsoft GPG key for Fedora and Suse
  ansible.builtin.rpm_key:
    key: https://packages.microsoft.com/keys/microsoft.asc
  become: true
  when: ansible_pkg_mgr in ["dnf", "zypper"]

# Package needs to be downloaded to a file with an rpm extension to prevent
# confusion for Ansible DNF module.
- name: Download VSCode for Fedora and Suse
  ansible.builtin.get_url:
    dest: /tmp/vscode.rpm
    mode: "600"
    url: >-
      https://update.code.visualstudio.com/latest/linux-rpm-{{
      _vscode_arch[system_architecture] }}/stable
  become: true
  when: ansible_pkg_mgr in ["dnf", "zypper"]

- name: Install VSCode for Fedora
  ansible.builtin.dnf:
    name: /tmp/vscode.rpm
  become: true
  when: ansible_pkg_mgr == "dnf"

- name: Install VSCode for MacOS
  community.general.homebrew_cask:
    accept_external_apps: true
    name: visual-studio-code
    state: present
  when: ansible_system == "Darwin"

- name: Install VSCode for PopOS
  ansible.builtin.apt:
    name: code
  become: true
  when: ansible_pkg_mgr == "apt" and ansible_distribution == "Pop!_OS"

- name: Install VSCode for Suse
  become: true
  community.general.zypper:
    name: /tmp/vscode.rpm
  when: ansible_pkg_mgr == "zypper"

- name: Install VSCode for Windows
  community.windows.win_scoop:
    name: vscode
  when: ansible_system == "Win32NT"

- name: Create VSCode user directory for Linux
  ansible.builtin.file:
    mode: "755"
    owner: "{{ ansible_user_id }}"
    path: "{{ ansible_env.HOME }}/.config/Code/User/"
    state: directory
  when: ansible_system == "Linux" and ansible_pkg_mgr != "apk"

- name: Copy VSCode keybindings file for Linux
  ansible.builtin.template:
    dest: "{{ ansible_env.HOME }}/.config/Code/User/keybindings.json"
    force: true
    mode: "640"
    owner: "{{ ansible_user_id }}"
    src: keybindings.j2
  when: ansible_system == "Linux" and ansible_pkg_mgr != "apk"

- name: Copy VSCode settings file for Linux
  ansible.builtin.template:
    dest: "{{ ansible_env.HOME }}/.config/Code/User/settings.json"
    force: true
    mode: "640"
    owner: "{{ ansible_user_id }}"
    src: settings.j2
  when: ansible_system == "Linux" and ansible_pkg_mgr != "apk"

- name: Create VSCode user directory for MacOS
  ansible.builtin.file:
    mode: "755"
    owner: "{{ ansible_user_id }}"
    path: "{{ ansible_env.HOME }}/Library/Application Support/Code/User/"
    state: directory
  when: ansible_system == "Darwin"

- name: Copy VSCode keybindings file for MacOS
  ansible.builtin.template:
    dest: >-
      {{ ansible_env.HOME }}/Library/Application
      Support/Code/User/keybindings.json
    force: true
    mode: "640"
    owner: "{{ ansible_user_id }}"
    src: keybindings.j2
  when: ansible_system == "Darwin"

- name: Copy VSCode settings file for MacOS
  ansible.builtin.template:
    dest: >-
      {{ ansible_env.HOME }}/Library/Application Support/Code/User/settings.json
    force: true
    mode: "640"
    owner: "{{ ansible_user_id }}"
    src: settings.j2
  when: ansible_system == "Darwin"

# User directory can be in multiple locations depending on package installer and
# Windows version.
- name: Create VSCode user directory for Windows
  ansible.windows.win_file:
    path: "{{ ansible_env.HOME }}/{{ item }}"
    state: directory
  loop:
    - AppData/Roaming/Code/User
    - scoop/apps/vscode/current/data/user-data/User/
  when: ansible_system == "Win32NT"

# Keybindings file can be in multiple locations depending on package installer
# and Windows version.
- name: Copy VSCode keybindings file for Windows
  ansible.windows.win_template:
    dest: "{{ ansible_env.HOME }}/{{ item }}"
    force: true
    src: keybindings.j2
  loop:
    - AppData/Roaming/Code/User/keybindings.json
    - scoop/apps/vscode/current/data/user-data/User/keybindings.json
  when: ansible_system == "Win32NT"

# Settings file can be in multiple locations depending on package installer and
# Windows version.
- name: Copy VSCode settings file for Windows
  ansible.windows.win_template:
    dest: "{{ ansible_env.HOME }}/{{ item }}"
    force: true
    mode: "644"
    src: settings.j2
  loop:
    - AppData/Roaming/Code/User/settings.json
    - scoop/apps/vscode/current/data/user-data/User/settings.json
  when: ansible_system == "Win32NT"

- name: Install VSCode extensions for Unix
  ansible.builtin.command: code --install-extension {{ item }}
  loop: "{{ vscode_extensions }}"
  when: ansible_system in ["Darwin", "Linux"] and ansible_pkg_mgr != "apk"

- name: Install VSCode extensions for Windows
  ansible.windows.win_shell: code --install-extension {{ item }}
  environment:
    Path: "{{ scoop_apps }}\\vscode\\current\\bin;{{ ansible_env.Path }}"
  loop: "{{ vscode_extensions }}"
  when: ansible_system == "Win32NT"

- name: Add VSCode Firewall rules for Windows
  community.windows.win_firewall_rule:
    action: allow
    direction: "{{ item['direction'] }}"
    enabled: true
    localport: any
    name: VSCode
    profiles:
      - domain
      - private
      - public
    program: "{{ scoop_apps }}\\vscode\\current\\bin\\code"
    protocol: "{{ item['protocol'] }}"
    state: present
  loop:
    - direction: in
      protocol: tcp
    - direction: in
      protocol: udp
    - direction: out
      protocol: tcp
    - direction: in
      protocol: udp
  when: ansible_system == "Win32NT"
