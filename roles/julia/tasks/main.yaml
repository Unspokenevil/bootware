- name: Get latest Julia version
  uri:
    url: https://formulae.brew.sh/api/formula/julia.json
    method: GET
    return_content: true
  register: julia_formula
  when: ansible_system in ["FreeBSD", "Linux"]

- name: Parse Julia major-minor version
  set_fact:
    julia_version: >-
      {{ julia_formula.json.versions.stable | regex_search('(\d+\.\d+)\.+\d+',
      '\1') | first }}
    julia_os: >-
      {{ 'musl' if ansible_pkg_mgr == 'apk' else ansible_system | lower }}
  when: ansible_system in ["FreeBSD", "Linux"]

- name: Install Julia for FreeBSD and Linux
  unarchive:
    creates: /usr/local/julia
    dest: /usr/local/
    extra_opts:
      - --transform
      - "s/julia-{{ julia_formula.json.versions.stable }}/julia/"
    mode: "755"
    remote_src: true
    src: >-
      https://julialang-s3.julialang.org/bin/{{ julia_os }}/{{
      julia_arch[ansible_architecture][0] }}/{{ julia_version }}/julia-{{
      julia_formula.json.versions.stable }}-{{ julia_os }}-{{
      julia_arch[ansible_architecture][1] }}.tar.gz
  vars:
    julia_arch:
      aarch64: [aarch64, aarch64]
      amd64: [x64, x86_64]
      x86_64: [x64, x86_64]
  when: ansible_system in ["FreeBSD", "Linux"]

- name: Install Julia for MacOS
  become: true
  become_user: "{{ user_account }}"
  community.general.homebrew:
    name: julia
    state: present
  when: ansible_system == "Darwin"

- name: Install Julia for Windows
  become: true
  become_user: "{{ user_account }}"
  community.windows.win_scoop:
    architecture: 64bit
    name: julia
  when: ansible_system == "Win32NT"
