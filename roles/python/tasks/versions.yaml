# Pyenv dependencies are listed at
# https://github.com/pyenv/pyenv/wiki#suggested-build-environment.

- name: Install ONNX dependencies for Arch distributions
  become: yes
  pacman:
    name:
      - base-devel
      - openssl
      - zlib
  when: ansible_pkg_mgr == "pacman"

- name: Install Pyenv dependencies for Debian distributions
  apt:
    name:
      - build-essential
      - curl
      - git
      - libbluetooth-dev
      - libbz2-dev
      - libffi-dev
      - liblzma-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - llvm
      - python3-openssl
      - tk-dev
      - uuid-dev
      - wget
      - xz-utils
      - zlib1g-dev
  become: yes
  when: ansible_pkg_mgr == "apt"

- name: Install Pyenv dependencies for MacOS
  become_user: "{{ user_account }}"
  community.general.homebrew:
    name:
      - openssl
      - readline
      - sqlite3
      - xz
      - zlib
  when: ansible_system == "Darwin"

# Do not use Homebrew for installing Pyenv. The subsequent commands will not be
# able to find the Pyenv executable.
- name: Install Pyenv for Unix
  become_user: "{{ user_account }}"
  shell:
    cmd: curl -Sfs https://pyenv.run | bash
    creates: "{{ user_home_dir }}/.pyenv/bin/pyenv"
    warn: no
  when: ansible_system in ["Darwin", "Linux"]

- name: Update Pyenv for Unix
  become_user: "{{ user_account }}"
  shell:
    cmd: source $HOME/.bashrc && pyenv update
    executable: /bin/bash
  when: ansible_system in ["Darwin", "Linux"]

- name: Get latest patch release for each Python minor version for Unix
  become_user: "{{ user_account }}"
  loop: "{{ python_versions }}"
  shell:
    cmd: >-
      source $HOME/.bashrc && pyenv install --list | grep -E "^\\s*{{ item
      }}.[0-9]+\\s*$" | tail -1 | xargs
    executable: /bin/bash
  register: pyenv_releases
  when: ansible_system in ["Darwin", "Linux"]

- name: Extract Python versions from Pyenv outputs for Unix
  set_fact:
    python_releases:
      "{{ pyenv_releases.results | map(attribute='stdout') | list }}"
  when: ansible_system in ["Darwin", "Linux"]

- name: Install multiple Python versions for Unix
  become_user: "{{ user_account }}"
  loop: "{{ python_releases }}"
  shell:
    cmd: source $HOME/.bashrc && pyenv install -s {{ item }}
    executable: /bin/bash
  when: ansible_system in ["Darwin", "Linux"]

- name: Install multiple Python versions for Windows
  become_user: "{{ user_account }}"
  community.windows.win_scoop:
    architecture: 64bit
    name: python{{ item | replace('.','') | replace('39','') }}
  loop: "{{ python_releases }}"
  when: ansible_system == "Windows"

- name: Set Python global versions for Unix
  become_user: "{{ user_account }}"
  shell:
    cmd: >-
      source $HOME/.bashrc && pyenv global system {{ python_releases | reverse |
      join(' ') }}
    executable: /bin/bash
  when: ansible_system in ["Darwin", "Linux"]
