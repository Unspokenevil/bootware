---
- name: Install Helm for FreeBSD
  become: true
  community.general.pkgng:
    name: helm
  tags:
    - install
  when: ansible_system == "FreeBSD"

- name: Install Helm for Linux
  ansible.builtin.package:
    name: helm
  become: true
  ignore_errors: true
  register: helm_linux
  tags:
    - install
  when: ansible_system == "Linux"

- name: Get latest Helm version for Linux
  ansible.builtin.uri:
    method: GET
    return_content: true
    url: https://formulae.brew.sh/api/formula/helm.json
  register: helm_formula
  tags:
    - install
  when: ansible_system == "Linux" and helm_linux is failed

- name: Create Helm temporary directory for Linux
  ansible.builtin.tempfile:
    state: directory
  register: helm_temp
  tags:
    - install
  when: ansible_system == "Linux" and helm_linux is failed

- name: Download Helm for Linux
  ansible.builtin.unarchive:
    dest: "{{ helm_temp.path }}"
    mode: "777"
    remote_src: true
    src: >-
      https://get.helm.sh/helm-v{{ helm_formula.json.versions.stable }}-linux-{{
      system_architecture }}.tar.gz
  tags:
    - install
  when: ansible_system == "Linux" and helm_linux is failed

- name: Install Helm for Linux
  ansible.builtin.copy:
    dest: /usr/local/bin/helm
    force: true
    mode: "755"
    remote_src: true
    src: "{{ helm_temp.path }}/linux-{{ system_architecture }}/helm"
  become: true
  tags:
    - install
  when: ansible_system == "Linux" and helm_linux is failed

- name: Install Helm for MacOS
  become: true
  become_user: "{{ brew_user }}"
  community.general.homebrew:
    name: helm
  tags:
    - install
  when: ansible_system == "Darwin"

- name: Install Helm for Windows
  community.windows.win_scoop:
    global: "{{ scoop_global }}"
    name: helm
  tags:
    - install
  when: ansible_system == "Win32NT"

- name: Install Helm plugins for Unix
  ansible.builtin.command: helm plugin install {{ item }}
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'Installed plugin' in helm_plugin_install"
  environment:
    PATH: /opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}
  failed_when: >-
    helm_plugin_install.rc != 0 and 'plugin already exists' not in
    helm_plugin_install.stderr
  loop: "{{ helm_plugins }}"
  register: helm_plugin_install
  tags:
    - plugin
  when: ansible_system != "Win32NT"

- name: Install Helm plugins for Windows
  ansible.windows.win_command: helm plugin install {{ item }}
  changed_when: "'Installed plugin' in helm_plugin_install"
  environment:
    Path: "{{ scoop_shims }};{{ ansible_env.Path }}"
  failed_when: >-
    helm_plugin_install.rc != 0 and 'plugin already exists' not in
    helm_plugin_install.stderr
  loop: "{{ helm_plugins }}"
  register: helm_plugin_install
  tags:
    - plugin
  when: ansible_system == "Win32NT"
