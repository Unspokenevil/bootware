---
- name: Get latest NVM version
  ansible.builtin.uri:
    method: GET
    return_content: true
    url: https://formulae.brew.sh/api/formula/nvm.json
  register: node_nvm_formula
  when: ansible_system not in ["FreeBSD", "Win32NT"]

# NVM is not well-supported for Alpine. For more information, visit
# https://github.com/nvm-sh/nvm/blob/master/README.md#installing-nvm-on-alpine-linux.
- name: Install Node for Alpine
  become: true
  community.general.apk:
    name:
      - nodejs
      - npm
  when: ansible_pkg_mgr == "apk"

# NVM does not provide binaries for FreeBSD.
- name: Install Node for FreeBSD
  become: true
  community.general.pkgng:
    name:
      - node20
      - npm-node20
  when: ansible_system == "FreeBSD"

- name: Download Node version manager installer for Unix
  ansible.builtin.get_url:
    dest: /tmp/nvm_install.sh
    mode: "755"
    url: >-
      https://raw.githubusercontent.com/nvm-sh/nvm/v{{
      node_nvm_formula.json.versions.stable }}/install.sh
  when: >-
    ansible_system not in ["FreeBSD", "Win32NT"] and ansible_pkg_mgr != "apk"

- name: Install Node version manager for Unix
  ansible.builtin.command: /tmp/nvm_install.sh
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'start using nvm' in node_nvm_install"
  register: node_nvm_install
  when: >-
    ansible_system not in ["FreeBSD", "Win32NT"] and ansible_pkg_mgr != "apk"

- name: Install multiple Node versions for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      nvm install {{ item }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'Now using node' in node_version_install"
  loop: "{{ node_versions }}"
  register: node_version_install
  when: >-
    ansible_system not in ["FreeBSD", "Win32NT"] and ansible_pkg_mgr != "apk"

# NVM is not used for Windows due to its frustrating launch checks that require
# administrator permissions.
- name: Install multiple Node versions for Windows
  community.windows.win_scoop:
    name: nodejs{{ item | replace('20', '') }}
  loop: "{{ node_versions }}"
  when: ansible_system == "Win32NT"

- name: Configure NPM for Alpine and FreeBSD
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      mkdir --parents {{ user_home }}/.npm-global
      npm config set prefix {{ user_home }}/.npm-global
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  # Command does not provide stdout information to determine a change.
  changed_when: true
  when: >-
    (ansible_pkg_mgr == "apk" or ansible_system == "FreeBSD") and user_id !=
    "root"

- name: Set default Node version for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      nvm alias default {{ node_versions[-1] }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: true
  when: >-
    ansible_system not in ["FreeBSD", "Win32NT"] and ansible_pkg_mgr != "apk"

# NVM cannot find compatible versions of NPM for Alpine.
- name: Update NPM for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      nvm install-latest-npm
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'npm upgraded' in node_npm_update"
  register: node_npm_update
  when: >-
    ansible_system not in ["FreeBSD", "Win32NT"] and user_id != "root" and
    ansible_pkg_mgr != "apk"

- name: >-
    Install or update Node CLI applications for Alpine and FreeBSD
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      npm install --global {{ item }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  # Command always marks application as changed.
  changed_when: true
  loop: "{{ node_applications }}"
  when: >-
    (ansible_pkg_mgr == "apk" or ansible_system == "FreeBSD") and user_id !=
    "root"

- name: Install or update Node CLI applications for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      nvm use {{ node_versions[-1] }}
      npm install --global {{ item }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  # Command always marks application as changed.
  changed_when: true
  loop: "{{ node_applications }}"
  when: >-
    ansible_system not in ["FreeBSD", "Win32NT"] and user_id != "root" and
    ansible_pkg_mgr != "apk"

- name: Install or update Node CLI applications for Windows
  ansible.windows.win_shell: |
    (npm install --global {{ item }}) -Or (npm update --global {{ item }})
  # Command always marks application as changed.
  changed_when: true
  environment:
    Path: "{{ scoop_apps }}\\nodejs\\current;{{ ansible_env.Path }}"
  loop: "{{ node_applications }}"
  when: ansible_system == "Win32NT"

- name: Create Fish functions directory for Unix
  ansible.builtin.file:
    mode: "750"
    owner: "{{ user_id }}"
    path: "{{ user_home }}/.config/fish/functions"
    state: directory
  become: true
  when: ansible_system != "Win32NT"

- name: Download Fast NVM Fish for Unix
  ansible.builtin.get_url:
    dest: "{{ user_home }}/.config/fish/functions/nvm.fish"
    mode: "644"
    owner: "{{ user_id }}"
    url: https://raw.githubusercontent.com/brigand/fast-nvm-fish/master/nvm.fish
  become: true
  when: >-
    ansible_system not in ["FreeBSD", "Win32NT"] and ansible_pkg_mgr != "apk"

- name: Mark role as executed to prevent reruns
  ansible.builtin.set_fact:
    cacheable: true
    node_role_executed: true
