---
# As of 11/22/2024, FNM does not believe that Node provides binaries for
# FreeBSD.
- name: Install Node for FreeBSD
  become: true
  community.general.pkgng:
    name:
      - node22
      - npm-node22
  when: ansible_system == "FreeBSD"

- name: Install Fast Node Manager for Linux
  ansible.builtin.package:
    name: fnm
  become: true
  ignore_errors: true
  register: node_fnm_linux
  when: ansible_system == "Linux"

- name: Get latest Fast Node Manager version for Linux
  ansible.builtin.uri:
    method: GET
    return_content: true
    url: https://formulae.brew.sh/api/formula/fnm.json
  register: node_fnm_formula
  when: ansible_system == "Linux" and node_fnm_linux is failed

- name: Download Fast Node Manager for Linux
  ansible.builtin.unarchive:
    dest: /tmp
    mode: "777"
    remote_src: true
    src: >-
      https://github.com/Schniz/fnm/releases/download/v{{
      node_fnm_formula.json.versions.stable }}/fnm-{{
      node_fnm_arch[system_architecture] }}.zip
  vars:
    node_fnm_arch:
      amd64: linux
      arm64: arm64
  when: ansible_system == "Linux" and node_fnm_linux is failed

- name: Create Fast Node Manager directory for Linux
  ansible.builtin.file:
    group: "{{ group_id }}"
    mode: "755"
    owner: "{{ user_id }}"
    dest: "{{ user_home }}/.local/share/fnm"
    state: directory
  become: true
  when: ansible_system == "Linux" and node_fnm_linux is failed

- name: Install Fast Node Manager for Linux
  ansible.builtin.copy:
    group: "{{ group_id }}"
    dest: "{{ user_home }}/.local/share/fnm/fnm"
    force: true
    mode: "755"
    owner: "{{ user_id }}"
    remote_src: true
    src: /tmp/fnm
  become: true
  when: ansible_system == "Linux" and node_fnm_linux is failed

- name: Install Fast Node Manager for MacOS
  become: true
  become_user: "{{ brew_user }}"
  community.general.homebrew:
    name: fnm
  when: ansible_system == "Darwin"

- name: Install Fast Node Manager for Windows
  community.windows.win_scoop:
    global: "{{ scoop_global }}"
    name: fnm
  when: ansible_system == "Win32NT"

- name: Install multiple Node versions for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      fnm install {{ item }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'already installed' not in node_version_install_unix"
  loop: "{{ node_versions }}"
  register: node_version_install_unix
  when: ansible_system != "Win32NT"

- name: Install multiple Node versions for Windows
  ansible.windows.win_shell: fnm install {{ item }}
  changed_when: "'already installed' not in node_version_install_windows"
  environment:
    Path: "{{ scoop_apps }}\\fnm\\current;{{ ansible_env.Path }}"
  loop: "{{ node_versions }}"
  register: node_version_install_windows
  when: ansible_system == "Win32NT"

- name: Configure NPM for FreeBSD
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      mkdir --parents {{ user_home }}/.npm-global
      npm config set prefix {{ user_home }}/.npm-global
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  # Command does not provide stdout information to determine a change.
  changed_when: true
  when: ansible_system == "FreeBSD" and user_id != "root"

- name: Set default Node version for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      fnm default {{ node_versions[-1] }}
      mkdir --parents {{ user_home }}/.npm-global
      npm config set prefix {{ user_home }}/.npm-global
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: true
  when: ansible_system not in ["FreeBSD", "Win32NT"] and user_id != "root"

- name: Set default Node version for Windows
  ansible.windows.win_shell: |
    fnm default {{ node_versions[-1] }}
    New-Item -Force -ItemType Directory -Path {{ user_home }}/.npm-global
    npm config set prefix {{ user_home }}/.npm-global
  # Command always marks application as changed.
  changed_when: true
  environment:
    Path: "{{ scoop_apps }}\\fnm\\current;{{ ansible_env.Path }}"
  when: ansible_system == "Win32NT"

- name: Install or update Node CLI applications for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      npm install --global {{ item }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  # Command always marks application as changed.
  changed_when: true
  loop: "{{ ['pnpm'] + node_applications }}"
  when: ansible_system != "Win32NT" and user_id != "root"

- name: Install or update Node CLI applications for Windows
  ansible.windows.win_shell: |
    fnm use {{ node_versions[-1] }}
    (npm install --global {{ item }}) -Or (npm update --global {{ item }})
  # Command always marks application as changed.
  changed_when: true
  environment:
    Path: "{{ scoop_apps }}\\fnm\\current;{{ ansible_env.Path }}"
  loop: "{{ node_applications }}"
  when: ansible_system == "Win32NT"

- name: Create user shell completion directories for Unix
  ansible.builtin.file:
    group: "{{ group_id }}"
    mode: "755"
    owner: "{{ user_id }}"
    path: "{{ user_home }}/{{ item }}"
    state: directory
  become: true
  loop:
    - .local/share/bash-completion/completions
    - .config/fish/completions
  when: ansible_system != "Win32NT" and user_id != "root"

- name: Generate FNM user shell completions for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      fnm completions --shell {{ item.shell }} > {{ user_home }}/{{ item.path }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: true
  loop:
    - path: .local/share/bash-completion/completions/fnm
      shell: bash
    - path: .config/fish/completions/fnm.fish
      shell: fish
  when: ansible_system not in ["FreeBSD", "Win32NT"] and user_id != "root"

- name: Generate PNPM user shell completions for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      pnpm completion {{ item.shell }} > {{ user_home }}/{{ item.path }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: true
  loop:
    - path: .local/share/bash-completion/completions/pnpm
      shell: bash
    - path: .config/fish/completions/pnpm.fish
      shell: fish
  when: ansible_system != "Win32NT" and user_id != "root"

- name: Mark role as executed to prevent reruns
  ansible.builtin.set_fact:
    cacheable: true
    node_role_executed: true
