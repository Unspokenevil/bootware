---
- name: Install Uv for FreeBSD
  become: true
  community.general.pkgng:
    name: uv
  tags:
    - install
  when: ansible_system == "FreeBSD"

- name: Get latest Uv version for Linux
  ansible.builtin.uri:
    method: GET
    return_content: true
    url: https://formulae.brew.sh/api/formula/uv.json
  register: uv_formula
  tags:
    - install
  when: ansible_system == "Linux"

- name: Create Uv temporary directory for Linux
  ansible.builtin.tempfile:
    state: directory
  register: uv_temp
  tags:
    - install
  when: ansible_system == "Linux"

- name: Set Uv temporary directory permissions for Linux
  ansible.builtin.file:
    mode: "755"
    path: "{{ uv_temp.path }}"
    state: directory
  tags:
    - install
  when: ansible_system == "Linux"

- name: Download Uv for Linux
  ansible.builtin.unarchive:
    dest: "{{ uv_temp.path }}"
    mode: "777"
    remote_src: true
    src: >-
      https://github.com/astral-sh/uv/releases/download/{{
      uv_formula.json.versions.stable }}/uv-{{ uv_arch }}-unknown-linux-{{
      uv_libc }}.tar.gz
  tags:
    - install
  when: ansible_system == "Linux"

- name: Install Uv for Linux
  ansible.builtin.copy:
    dest: /usr/local/bin/uv
    force: true
    mode: "755"
    remote_src: true
    src: "{{ uv_temp.path }}/uv-{{ uv_arch }}-unknown-linux-{{ uv_libc }}/uv"
  become: true
  tags:
    - install
  when: ansible_system == "Linux"

- name: Install Uv for MacOS
  become: true
  become_user: "{{ brew_user }}"
  community.general.homebrew:
    name: uv
  tags:
    - install
  when: ansible_system == "Darwin"

- name: Install Uv for Windows
  community.windows.win_scoop:
    global: true
    name: uv
  tags:
    - install
  when: ansible_system == "Win32NT"

- name: Register Python files as executables for Windows
  ansible.windows.win_regedit:
    data: "{{ item.data }}"
    path: "{{ item.path }}"
    type: string
  loop:
    - data: pyfile
      path: "HKLM:\\Software\\Classes\\.py"
    - data: >-
        "{{ scoop_path }}\shims\uv.exe" --no-config --quiet run --script "%1" %*
      path: "HKLM:\\Software\\Classes\\pyfile\\shell\\open\\command"
  tags:
    - install
  when: ansible_system == "Win32NT"

# Since ansible_env.Path is fixed on play connection, using
# ansible.windows.win_environment for PATHEXT in other roles will overwrite
# changes made here. Thus ansible.windows.win_environment cannot be used to
# extend PATHEXT.
- name: Add Python files to system path for Windows
  ansible.windows.win_shell: |
    $PathExt = [Environment]::GetEnvironmentVariable('PATHEXT', 'Machine')
    If (-Not ($PathExt -Like "*.PY*")) {
      [System.Environment]::SetEnvironmentVariable(
        'PATHEXT', "$PathExt;.PY", 'Machine'
      )
      Write-Output 'PATHEXT updated'
    }
  changed_when: "'PATHEXT updated' in uv_pathext"
  register: uv_pathext
  tags:
    - install
  when: ansible_system == "Win32NT"

- name: Create Uv shell completions for Unix
  ansible.builtin.shell:
    cmd: uv --generate-shell-completion {{ item.shell }} > '{{ item.path }}'
  become: true
  changed_when: true
  environment:
    PATH: /opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}
  loop:
    - path: "{{ bash_completion }}/uv"
      shell: bash
    - path: "{{ fish_completion }}/uv.fish"
      shell: fish
    - path: "{{ nushell_vendor_autoload }}/uv.nu"
      shell: nushell
  tags:
    - install
  when: ansible_system != "Win32NT"

- name: Create Uv Nushell shell completions for Windows
  # Using "WriteAllLines" to avoid the Byte Order Mark (BOM) that PowerShell 5
  # prepends to outputs redirected to files.
  ansible.windows.win_shell: |
    $Text = uv --generate-shell-completion nushell
    [System.IO.File]::WriteAllLines("{{ nushell_vendor_autoload }}/uv.nu", $Text)
  changed_when: true
  environment:
    Path: "{{ scoop_path }}\\shims;{{ ansible_env.Path }}"
  tags:
    - completion
    - install
  when: ansible_system == "Win32NT"

- name: Create Uv PowerShell completions for Windows
  # Using "WriteAllLines" to avoid the Byte Order Mark (BOM) that PowerShell 5
  # prepends to outputs redirected to files.
  ansible.windows.win_shell: |
    $Text = uv --generate-shell-completion powershell
    [System.IO.File]::WriteAllLines("{{ item }}/UvCompletion.psm1", $Text)
  changed_when: true
  environment:
    Path: "{{ scoop_path }}\\shims;{{ ansible_env.Path }}"
  loop: "{{ powershell_module_paths }}"
  tags:
    - completion
    - install
  when: ansible_system == "Win32NT"

- name: Remove Uv temporary directory for Linux
  ansible.builtin.file:
    path: "{{ uv_temp.path }}"
    state: absent
  tags:
    - install
  when: ansible_system == "Linux"
