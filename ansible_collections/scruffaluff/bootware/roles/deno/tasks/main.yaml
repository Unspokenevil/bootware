---
- name: Install Deno for Alpine
  become: true
  community.general.apk:
    name: deno
  when: ansible_pkg_mgr == "apk"

- name: Install Deno for FreeBSD
  become: true
  community.general.pkgng:
    name: deno
  when: ansible_system == "FreeBSD"

- name: Download Deno for Unix
  ansible.builtin.unarchive:
    dest: /tmp
    mode: "777"
    remote_src: true
    src: >-
      https://github.com/denoland/deno/releases/latest/download/deno-{{
      deno_arch[system_architecture] }}-{{ deno_env[ansible_system] }}.zip
  vars:
    deno_arch:
      amd64: x86_64
      arm64: aarch64
    deno_env:
      Darwin: apple-darwin
      Linux: unknown-linux-{{ system_libc }}
  when: >-
    ansible_system == "Darwin" or (ansible_system == "Linux" and system_libc ==
    "gnu")

- name: Install Deno for Unix
  ansible.builtin.copy:
    dest: /usr/local/bin/deno
    force: true
    mode: "755"
    remote_src: true
    src: /tmp/deno
  become: true
  when: >-
    ansible_system == "Darwin" or (ansible_system == "Linux" and system_libc ==
    "gnu")

- name: Download Deno archive for Windows
  ansible.windows.win_get_url:
    dest: "{{ ansible_env.TEMP }}/deno.zip"
    url: >-
      https://github.com/denoland/deno/releases/latest/download/deno-x86_64-pc-windows-msvc.zip
  when: ansible_system == "Win32NT"

- name: Decompress Deno archive for Windows
  community.windows.win_unzip:
    dest: "{{ ansible_env.TEMP }}/deno"
    src: "{{ ansible_env.TEMP }}/deno.zip"
  when: ansible_system == "Win32NT"

- name: Create Deno program directory for Windows
  ansible.windows.win_file:
    path: "C:/Program Files/Deno/bin"
    state: directory
  when: ansible_system == "Win32NT"

- name: Update system path to include Deno program directory for Windows
  ansible.windows.win_path:
    elements: "C:\\Program Files\\Deno\\bin"
    scope: machine
  when: ansible_system == "Win32NT"

- name: Install Deno for Windows
  ansible.windows.win_copy:
    dest: "C:/Program Files/Deno/bin/deno.exe"
    force: true
    remote_src: true
    src: "{{ ansible_env.TEMP }}/deno/deno.exe"
  when: ansible_system == "Win32NT"

- name: Create shell completion directories for Unix
  ansible.builtin.file:
    mode: "755"
    path: "{{ item }}"
    state: directory
  become: true
  loop:
    - "{{ bash_completion }}"
    - "{{ fish_completion }}"
  when: >-
    ansible_system in ["Darwin", "FreeBSD"] or (ansible_system == "Linux" and
    system_libc == "gnu") or ansible_pkg_mgr == "apk"

- name: Generate Deno shell completions for Unix
  ansible.builtin.shell: deno completions {{ item }} > /tmp/deno.{{ item }}
  become: true
  changed_when: true
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"
  loop:
    - bash
    - fish
  when: >-
    ansible_system in ["Darwin", "FreeBSD"] or (ansible_system == "Linux" and
    system_libc == "gnu") or ansible_pkg_mgr == "apk"

- name: Install Deno shell completions for Unix
  ansible.builtin.copy:
    dest: "{{ item.dest }}"
    force: true
    mode: "644"
    remote_src: true
    src: /tmp/deno.{{ item.shell }}
  become: true
  loop:
    - dest: "{{ bash_completion }}/deno"
      shell: bash
    - dest: "{{ fish_completion }}/deno.fish"
      shell: fish
  when: >-
    ansible_system in ["Darwin", "FreeBSD"] or (ansible_system == "Linux" and
    system_libc == "gnu") or ansible_pkg_mgr == "apk"

- name: Create Deno PowerShell completions directory for Windows
  ansible.windows.win_file:
    owner: "{{ user_id }}"
    path: >-
      {{ user_home }}/Documents/WindowsPowerShell/Modules/DenoCompletion
    state: directory
  when: ansible_system == "Win32NT"

- name: Generate Deno PowerShell completions module for Windows
  ansible.windows.win_shell: >-
    deno completions powershell > {{ user_home
    }}/Documents/WindowsPowerShell/Modules/DenoCompletion/DenoCompletion.psm1
  changed_when: true
  environment:
    Path: "C:\\Program Files\\Deno\\bin;{{ ansible_env.Path }}"
  when: ansible_system == "Win32NT"
