---
# Pyenv dependencies are listed at
# https://github.com/pyenv/pyenv/wiki#suggested-build-environment.
- name: Install Pyenv dependencies for Alpine
  become: true
  community.general.apk:
    name:
      - build-base
      - bzip2-dev
      - libffi-dev
      - openssl-dev
      - readline-dev
      - sqlite-dev
      - tk-dev
      - xz-dev
      - zlib-dev
  when: ansible_pkg_mgr == "apk"

- name: Install Pyenv dependencies for Arch
  become: true
  community.general.pacman:
    name:
      - base-devel
      - zlib
  when: ansible_pkg_mgr == "pacman"

- name: Install Pyenv dependencies for Debian
  ansible.builtin.apt:
    name:
      - build-essential
      - curl
      - git
      - libbluetooth-dev
      - libbz2-dev
      - libffi-dev
      - liblzma-dev
      - libncurses5-dev
      - libncursesw5-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - llvm
      - python3-openssl
      - tk-dev
      - uuid-dev
      - wget
      - xz-utils
      - zlib1g-dev
  become: true
  when: ansible_pkg_mgr == "apt"

- name: Install Pyenv dependencies for Fedora
  ansible.builtin.dnf:
    name:
      - bzip2-devel
      - findutils
      - libffi-devel
      - openssl-devel
      - readline-devel
      - sqlite
      - sqlite-devel
      - xz
      - xz-devel
      - zlib-devel
  become: true
  when: ansible_pkg_mgr == "dnf"

- name: Install Pyenv dependencies for MacOS
  community.general.homebrew:
    name:
      - openssl
      - readline
      - sqlite3
      - xz
      - zlib
  when: ansible_system == "Darwin"

# Do not use Homebrew for installing Pyenv. The subsequent commands will not be
# able to find the Pyenv executable.
- name: Install Pyenv for Unix
  # prettier-ignore
  ansible.builtin.shell:  # noqa command-instead-of-module
    cmd: curl -LSfs https://pyenv.run | bash
    creates: "{{ user_home }}/.pyenv/bin/pyenv"
  become: true
  become_user: "{{ user_id }}"
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "apk"

- name: Update Pyenv for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      pyenv update
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  # TODO: Figure out update message.
  changed_when: true
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "apk"

- name: Get latest patch release for each Python minor version for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      pyenv install --list | grep --extended-regexp "^\\s*{{ item }}.[0-9]+\\s*$" | tail -1 | xargs
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: false
  loop: "{{ python_versions }}"
  register: python_pyenv_releases
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "apk"

- name: Extract Python versions from Pyenv outputs for Unix
  ansible.builtin.set_fact:
    python_releases:
      "{{ python_pyenv_releases.results | map(attribute='stdout') | list }}"
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "apk"

- name: Install multiple Python versions for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      pyenv install --skip-existing {{ item }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  changed_when: "'Installed Python' in python_version_install"
  loop: "{{ python_releases }}"
  register: python_version_install
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "apk"

- name: Install multiple Python versions for Windows
  community.windows.win_scoop:
    name: python{{ item | replace('.', '') | replace('311', '') }}
  loop: "{{ python_versions }}"
  when: ansible_system == "Win32NT"

- name: Set Python global versions for Unix
  ansible.builtin.shell:
    cmd: |
      source {{ user_home }}/.bashrc
      pyenv global system {{ python_releases | reverse | join(' ') }}
    executable: "{{ bash_executable }}"
  become: true
  become_user: "{{ user_id }}"
  # Command does not provide stdout information to determine a change.
  changed_when: true
  when: ansible_system != "Win32NT" and ansible_pkg_mgr != "apk"
