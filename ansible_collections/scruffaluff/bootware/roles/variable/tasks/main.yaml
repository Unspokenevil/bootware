---
- name: Query host for PowerShell information
  ansible.builtin.raw: echo $PSVersionTable
  changed_when: false
  ignore_errors: true
  register: powershell_version

- name: Set connection variables if system is Windows
  ansible.builtin.set_fact:
    ansible_pkg_mgr: scoop
    ansible_shell_type: powershell
  when: >-
    powershell_version is success and 'Windows' in powershell_version.stdout

- name: Gather facts about system
  ansible.builtin.gather_facts: {}

- name: Set become method for Alpine
  ansible.builtin.set_fact:
    ansible_become_method: doas
  when: ansible_system == "Linux" and ansible_pkg_mgr == "apk"

- name: Query system Glibc version
  ansible.builtin.command:
    cmd: ldd --version
  register: glibc_version_text
  changed_when: false
  when: ansible_system == "Linux" and system_libc == "gnu"

- name: Parse system Glibc version
  ansible.builtin.set_fact:
    glibc_version: >-
      {{ glibc_version_text.stdout_lines[0] | regex_search('(\d+\.)+\d+') }}
  when: ansible_system == "Linux" and system_libc == "gnu"

- name: Check if GNOME shell is installed
  ansible.builtin.stat:
    path: "{{ item }}"
  loop:
    - /usr/bin/gnome-shell
    - /usr/local/bin/gnome-shell
  register: gnome_desktop_stat
  when: ansible_system in ["FreeBSD", "Linux"]

- name: Mark if GNOME desktop is installed
  ansible.builtin.set_fact:
    cacheable: true
    # Double braces are needed to evaluate variable as an expression rather than
    # a string.
    gnome_desktop: >-
      {{ (gnome_desktop_stat.results | map(attribute='stat.exists')) is any }}
  when: ansible_system in ["FreeBSD", "Linux"]

- name: Find GNOME version for GNOME desktops
  ansible.builtin.command:
    cmd: gnome-shell --version
  become: true
  become_user: "{{ user_id }}"
  changed_when: false
  register: gnome_version_text
  when: ansible_system in ["FreeBSD", "Linux"] and gnome_desktop

- name: Parse GNOME version for GNOME desktops
  ansible.builtin.set_fact:
    glibc_version: >-
      {{ glibc_version_text.stdout_lines[0] | regex_search('(\d+\.)+\d+') }}
  when: ansible_system in ["FreeBSD", "Linux"] and gnome_desktop

- name: Mark role as executed to prevent reruns
  ansible.builtin.set_fact:
    cacheable: true
    variable_role_executed: true
