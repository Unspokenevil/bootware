# GitHub Actions workflow file.
#
# For more information, visit
# https://docs.github.com/actions/learn-github-actions.

---
name: build

# Makes workflow run on any push or pull request.
on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      debug:
        default: false
        description: Use TMate session for debugging on failure
        type: boolean
      job:
        default: test
        description: CI job to run
        options:
          - lint
          - test-bash
          - test-documenation
          - test-package
          - test-powershell
        type: choice

jobs:
  lint:
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.job == 'lint' }}
    name: Check code with formatter and linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Install Node interpreter
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Cache Node packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: >-
            node-20_${{ runner.os }}_npm-${{ hashFiles('package-lock.json') }}
      - name: Install Node packages
        run: |
          node --version
          npm --version
          npm ci
      - name: Install Python interpreter
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: .venv
          key: >-
            python-3.11_${{ runner.os }}_poetry-${{ hashFiles('poetry.lock') }}
      - name: Install Python packages
        run: |
          python --version
          python -m pip --version
          python -m pip install poetry
          poetry config virtualenvs.in-project true
          poetry lock --check
          poetry install --verbose
      - name: Check format of configuration files
        run: npm run prettier:test
      - name: Install Shfmt
        run: |
          shfmt_version="$(curl -LSfs https://formulae.brew.sh/api/formula/shfmt.json | jq --raw-output .versions.stable)"
          sudo curl -LSfs "https://github.com/mvdan/sh/releases/download/v${shfmt_version}/shfmt_v${shfmt_version}_linux_amd64" --output "/usr/local/bin/shfmt"
          sudo chmod 755 "/usr/local/bin/shfmt"
      - name: Check format of shell scripts
        run: npm run shfmt:test
      - name: Install ShellCheck
        run: sudo apt install --yes shellcheck
      - name: Run ShellCheck on shell scripts
        run: npm run shellcheck:test
      - name: Lint Ansible playbook and roles
        run: |
          poetry run ansible-lint --version
          poetry run ansible-lint playbook.yaml

  test-bash:
    if: >-
      ${{ github.event_name != 'workflow_dispatch' || inputs.job == 'test-bash'
      }}
    name: Run unit tests for Bash scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Install YQ YAML parser
        run: |
          sudo curl -LSfs https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 --output /usr/local/bin/yq
          sudo chmod 755 /usr/local/bin/yq
      - name: Install Node interpreter
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Cache Node packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: >-
            node-20_${{ runner.os }}_npm-${{ hashFiles('package-lock.json') }}
      - name: Install Node packages
        run: |
          node --version
          npm --version
          npm ci
      - name: Run Bash unit tests with Bats
        run: npm run bats:test
      - name: Setup tmate session if job failed
        if: >-
          ${{ failure() && github.event_name == 'workflow_dispatch' &&
          inputs.debug }}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3

  test-documenation:
    if: >-
      ${{ github.event_name != 'workflow_dispatch' || inputs.job ==
      'test-documentation' }}
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Install Node interpreter
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Cache Node packages
        uses: actions/cache@v3
        with:
          path: node_modules
          key: >-
            node-20_${{ runner.os }}_npm-${{ hashFiles('package-lock.json') }}
      - name: Install Node packages
        run: |
          node --version
          npm --version
          npm ci
      - name: Build documentation
        # Vuepress incompatible with OpenSSL version 3, which is used on Ubuntu
        # 22.04. Vuepress is in maintenance mode and users are recommended to
        # migrate to its successor is Vitepress,
        # https://github.com/vuejs/vitepress. Migration will occur after
        # Vitepress makes a stable release.
        env:
          NODE_OPTIONS: --openssl-legacy-provider
        run: npm run vuepress:build
      - name: Setup tmate session if job failed
        if: >-
          ${{ failure() && github.event_name == 'workflow_dispatch' &&
          inputs.debug }}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3

  test-package:
    if: >-
      ${{ github.event_name != 'workflow_dispatch' || inputs.job ==
      'test-package' }}
    name: Test building a ${{ matrix.format }} package
    strategy:
      fail-fast: false
      matrix:
        format:
          - deb
          - rpm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./tests/integration/${{ matrix.format }}.dockerfile
          tags: bootware:${{ matrix.format }}
          push: false
      - name: Setup tmate session if job failed
        if: >-
          ${{ failure() && github.event_name == 'workflow_dispatch' &&
          inputs.debug }}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3

  test-powershell:
    if: >-
      ${{ github.event_name != 'workflow_dispatch' || inputs.job ==
      'test-powershell' }}
    name: Run linter and unit tests for PowerShell scripts
    runs-on: windows-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Install YQ YAML parser
        run: choco install --yes yq
      - name: Install PSScriptAnalyzer
        run: Install-Module -Force -Name PSScriptAnalyzer
        shell: pwsh
      - name: Run PSScriptAnalyzer format lints on all PowerShell scripts
        run: >-
          Invoke-ScriptAnalyzer -EnableExit -Recurse -Path . -Setting
          CodeFormatting
        shell: pwsh
      - name: Run PSScriptAnalyzer code lints on all PowerShell scripts
        run: Invoke-ScriptAnalyzer -EnableExit -Recurse -Path .
        shell: pwsh
      - name: Install Pester
        run: Install-Module -Force -Name Pester
        shell: pwsh
      - name: Run PowerShell unit tests with Pester
        run: Invoke-Pester -Output Detailed ./tests/unit/
        shell: pwsh
      - name: Setup tmate session if job failed
        if: >-
          ${{ failure() && github.event_name == 'workflow_dispatch' &&
          inputs.debug }}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3
